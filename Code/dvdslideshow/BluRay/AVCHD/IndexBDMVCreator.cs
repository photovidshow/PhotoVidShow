using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace DVDSlideshow.BluRay.AVCHD
{
    public class IndexBDMVCreator
    {
        //
        // Settings are the same for every blu-ray folder i.e.
        // AppInfoBDMV = 2D
        // First playback = ticked, HDMV, interactive =2 
        // Top menu(0), HDMV,  1
        //
        // Title 1
        // HDMV, title seach permitted, playback = movie, OID/file =0
        //
        // play first title HDMV
        /*
        private byte[] data = { 0x49, 0x4e, 0x44, 0x58, 0x30, 0x32, 0x30, 0x30,
                                0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x26, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00,
                                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
                                0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         */


        // 1 title BD-J
        private byte[] data = { 0x49, 0x4e, 0x44, 0x58, 0x30, 0x32, 0x30, 0x30,
                                0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00,

                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00,

                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                                0x00, 0x26, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,

                                0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,

                                0x80, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00 };


        public bool CreateIndexBDMV(string inFolder)
        {
            string file = inFolder + "\\index.bdmv";
            try
            {
                FileStream stream = new FileStream(file, FileMode.CreateNew);

                try
                {
                    using (BinaryWriter writter = new BinaryWriter(stream))
                    {
                        writter.Write(data);
                    }
                }
                finally
                {
                    stream.Close();
                }
            }
            catch (Exception exception)
            {
                AVCHDLog.Error("Failed to create '" + file + "' " + exception.Message);
                return false;
            }

            return true;
        }
    }
}
