float4 params0: register(C0);


// params0[0] = delta
// params0[1] = 1-delta


struct PS_INPUT
{
    float4 Position   : POSITION;
    float2 Texture0   : TEXCOORD0;
    float2 Texture1   : TEXCOORD1;
};

struct PS_OUTPUT
{
    float4 Color   : COLOR0;
};


sampler2D Texture1Sampler : register(S0);

PS_OUTPUT ps_main( in PS_INPUT In )
{
    PS_OUTPUT pixelColor;

   float2 center = {0.5, 0.5};
   float2 uv = In.Texture0.xy;
   float inner_radius = 0.3;
   float magnification =1 + (3 * params0[0]);
   float outer_radius = 0.8;

   float2 center_to_pixel = uv - center; // vector from center to pixel
   
	float distance = length(center_to_pixel);
	
	float4 color;
	
	float2 sample_point;
	
	if(distance < outer_radius) {
	
      if( distance < inner_radius ) {
         sample_point = center + (center_to_pixel / magnification);
	   }
	   else {
	      float radius_diff = outer_radius - inner_radius;
	      float ratio = (distance - inner_radius ) / radius_diff; // 0 == inner radius, 1 == outer_radius
	      ratio = ratio * 3.14159; //  -pi/2 .. pi/2	      
	      float adjusted_ratio = cos( ratio );  // -1 .. 1
	      adjusted_ratio = adjusted_ratio + 1;   // 0 .. 2
	      adjusted_ratio = adjusted_ratio / 2;   // 0 .. 1
	   
	      sample_point = ( (center + (center_to_pixel / magnification) ) * (  adjusted_ratio)) + ( uv * ( 1 - adjusted_ratio) );
	   }
	}
	else {
	   sample_point = uv;
	}


    pixelColor.Color = tex2D( Texture1Sampler, sample_point );

    return pixelColor;
}
